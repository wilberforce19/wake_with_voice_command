package com.example.ramkumar.voicetest;

import android.content.Intent;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.Handler;
import android.speech.RecognitionListener;
import android.speech.RecognizerIntent;
import android.speech.SpeechRecognizer;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;

import java.io.IOException;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
    SpeechRecognizer recognizer;
    RecognitionListener listener = new RecognitionListener() {
        @Override
        public void onResults(Bundle results) {
            ArrayList<String> voiceResults = results
                    .getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
            Log.d("CFlow", "Printing matches: ");
            if (voiceResults != null) {
                for (String match : voiceResults) {
                    Log.d("CFlow", match);
                    if (match.equals("a 2010")) {
                        Log.d("CFlow", "I heard my name!");
                        MediaPlayer mp = new MediaPlayer();
                        try {
                            mp.setDataSource("/storage/sdcard0/Hello.3gpp");
                            mp.prepare();
                            mp.start();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }

        @Override
        public void onReadyForSpeech(Bundle params) {
            Log.d("CFlow", "Ready for speech");
        }

        @Override
        public void onError(int error) {
            Log.d("CFlow", "Error listening for speech: " + error);
        }

        @Override
        public void onBeginningOfSpeech() {
            Log.d("CFlow", "Speech starting");
        }

        @Override
        public void onBufferReceived(byte[] buffer) {
            // TODO Auto-generated method stub

        }

        @Override
        public void onEndOfSpeech() {
            // TODO Auto-generated method stub

        }

        @Override
        public void onEvent(int eventType, Bundle params) {
            // TODO Auto-generated method stub

        }

        @Override
        public void onPartialResults(Bundle partialResults) {
            // TODO Auto-generated method stub

        }

        @Override
        public void onRmsChanged(float rmsdB) {
            // TODO Auto-generated method stub

        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        recognizer = SpeechRecognizer.createSpeechRecognizer(this.getApplicationContext());
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
    }

    public void SpeechStarted () {
        recognizer.setRecognitionListener(listener);
        recognizer.startListening(intent);
    }

    private MediaRecorder mRecorder = null;
    double amp;
    Handler handler=new Handler();
    Runnable runnable = new Runnable() {
        @Override
        public void run() {
            if (mRecorder == null) {
                Log.d("CFlow", "Resuming recording");
                Resume();
            }
            amp = getAmplitude();
            Log.d("CFlow", "Intensity - " + amp);
            if (amp > 15000) {
                Log.d("CFlow", "Inside if");
                Pause();
                Log.d("CFlow", "Recording paused");
                SpeechStarted();
                handler.postDelayed(runnable,10000);
            }
            else {
                Log.d("CFlow", "Inside else");
                handler.postDelayed(runnable, 2000);
            }
        }
    };

    public void Resume() {
        mRecorder = new MediaRecorder();
        mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
        //mRecorder.setOutputFile("/storage/sdcard0/test.3gpp");
        mRecorder.setOutputFile("/dev/null");
        try {
            mRecorder.prepare();
        } catch(IOException e) {
            e.printStackTrace();
        }
        mRecorder.start();
    }

    public void Start(View V) {
        if (mRecorder == null) {
            Resume();
            Log.d("CFlow", "Recording started");
            Log.d("CFlow", "Runnable starting");
            runnable.run();
        }
    }

    public void Pause() {
            mRecorder.stop();
            mRecorder.release();
            mRecorder = null;
    }

    public void Stop(View v) {
        if (mRecorder != null) {
            Pause();
            Log.d("CFlow", "Recording stopped");
            handler.removeCallbacks(runnable);
            Log.d("CFlow", "Runnable stopped");
        }
    }

    public double getAmplitude() {
        if (mRecorder != null) {
            return mRecorder.getMaxAmplitude();
        } else
            return 0;
    }
}
